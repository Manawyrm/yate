[general]
; This section sets global variables of the MGCP Call Agent module

; priority: int: Priority of the chan.rtp message handler
;priority=80


[engine]
; These parameters are used to initialize the MGCP Engine

; enabled: bool: Enable the MGCP engine
;enabled=yes

; address: ipaddress: Local IP address to bind to, default all interfaces
;address=0.0.0.0

; port: int: UDP port to bind, set to zero to use default MGCP CA port (2727)
;port=

; request_ack: bool: Request an Acknowledge of the transactions
;request_ack=yes

; send_provisional: bool: Send 1xx provisional answers to the requests
;send_provisional=yes


[endpoint]
; Settings for the local endpoint

; user: string: The user part of the local endpoint
;user=yate

; host: string: The host part of the local endpoint, default engine's address
;host=

; port: int: Declared local port, defaults to engine's port
;port=


[codecs]
; This section allows to individually enable or disable the codecs

; default: bool: Enable all unlisted codecs by default if a transcoder exists
;default=enable

; mulaw: bool: Companded-only G711 mu-law (PCMU/8000)
;mulaw=default

; alaw: bool: Companded-only G711 a-law (PCMU/8000)
;alaw=default

; gsm: bool: European GSM 06.10 (GSM/8000)
;gsm=default

; lpc10: bool: Linear Prediction Codec (LPC/8000)
;lpc10=default

; ilbc: bool: Internet Low Bandwidth Codec (iLBC/8000)
;ilbc=default

; amr: bool: Adaptive Multi-Rate 3GPP (AMR/8000)
;amr=default

; slin: bool: Signed Linear 16-bit uncompressed (L16/8000)
;slin=default

; g723: bool: ITU G.723 all variations (G723/8000)
;g723=default

; g726: bool: ITU G.726 32-bit (G726-32/8000)
;g726=default

; g728: bool: ITU G.728 all variations (G728/8000)
;g728=default

; g729: bool: ITU G.729 all variations (G729/8000)
;g729=default

; g729_annexb: bool: G.729 Annex B (VAD) support default (if not in SDP)
; NOTE: RFC 3555 specifies the default should be yes
;g729_annexb=no

; amr_octet: bool: Octet aligned AMR RTP payload default (if not in SDP)
; NOTE: RFC 4867 (and older 3267) specifies the default is bandwidth efficient
;amr_octet=no


[hacks]
; This section holds the dirty stuff required to work with some broken
;  implementations
;
; ilbc_forced: string: Format to force as iLBC, can be: ilbc20 or ilbc30
;ilbc_forced=
;
; ilbc_default: string: Format to use for iLBC when packetization is unknown
;ilbc_default=ilbc30

; g729_annexb: bool: Force G.729 Annex B support when parsing the SDP
;g729_annexb=

; ignore_sdp_port: bool: Ignore SDP changes if only the port is different
; This allows preserving the local RTP session and port
;ignore_sdp_port=no


;[gw PUT_NAME_HERE]
; One gw ... section is required for each gateway we control
; The gateway name is a string that can be referenced from other modules

; user: string: Remote MGCP resource name
;user=

; host: ipaddress: IP address or hostname of the gateway, mandatory
;host=

; port: int: Remote port to send packets to
;port=2427

; address: ipaddress: IP address of the gateway, if present will override
;  resolving the host name and will immediately make the span operational
;  without waiting for a remote RSIP
;address=

; version: string: Protocol name and version to use initially, if left blank
;  will autodetect from first received RSIP, until then uses MGCP 1.0
; Depending on remote capabilities and settings it is possible to use the SGCP
;  or TGCP protocols too.
;version=

; default: bool: This is the default gateway to send commands to
; The first gateway which is not explicitely disabled or the last that is
;  explicitely enabled will become default
;default=no

; chans: int: Number of PSTN circuits to create in span
;chans=1

; offset: int: Offset of circuit code relative to start in span
;offset=0

; increment: integer: How much will increment this span the circuit number in
;  the group it belongs to
; Defaults to 32 if chans is 30 or 31 (E1), 24 if chans is 23 (T1), number of
;  circuits in all other cases
;increment=

; clearconn: bool: Clear all connections of remote endpoints when initialized
;clearconn=no

; forward_rtp: bool: Support to forward RTP directly to protocols that support it
; The actual direct RTP forwarding is still negotiated in routing
;forward_rtp=yes for digital gateways, no for analogic

; forward_sdp: bool: Also include the raw SDP in the RTP forward offer
;forward_sdp=no
